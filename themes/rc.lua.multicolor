--[[

     Multicolor Awesome WM config 2.0
     github.com/copycat-killer

--]]

-- {{{ Required libraries
local gears         = require("gears")
local awful         = require("awful")
                      require("awful.autofocus")
local wibox         = require("wibox")
local beautiful     = require("beautiful")
local naughty       = require("naughty")
local lain          = require("lain")
--local menubar       = require("menubar")
local freedesktop   = require("freedesktop")
local hotkeys_popup = require("awful.hotkeys_popup").widget
local pulseaudio    = require("pulseaudio")
--local tyrannical = require("tyrannical")
--local radical       = require("radical")
local vicious       = require("vicious")
--local vicious_contrib = require("vicious.contrib")
--local blingbling    = require("blingbling")

-- }}}
awful.util.spawn_with_shell("xcompmgr -r 12.00 -o 0.75 -l 15.00 -t 15.00 -I 0.028 -O 0.03 -D 10.0 -c -C -F -n &")
-- awful.util.spawn_with_shell("pulseaudio --start&")
-- {{{ Error handling
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end

do
    local in_error = false
    awesome.connect_signal("debug::error", function (err)
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = tostring(err) })
        in_error = false
    end)
end
-- }}}

-- {{{ Autostart applications
local function run_once(cmd)
  findme = cmd
  firstspace = cmd:find(" ")
  if firstspace then
     findme = cmd:sub(0, firstspace-1)
  end
  awful.spawn.with_shell(string.format("pgrep -u $USER -x %s > /dev/null || (%s)", findme, cmd))
end

run_once("qterminal")
run_once("subl")
--run_once("/home/jacka/bin/start.sh &")
-- }}}

-- {{{ Variable definitions
-- beautiful init
--beautiful.init(os.getenv("HOME") .. "/.config/awesome/themes/multicolor/theme.lua")
beautiful.init(awful.util.get_configuration_dir() .. "/themes/multicolor/theme.lua")

-- common
local modkey     = "Mod4"
local altkey     = "Mod1"
local altkey1     = "Control_L"
local terminal   = "qterminal" or "konsole"
local editor     = os.getenv("EDITOR") or "subl" or "vi"

-- user defined
local browser    = "firefox"
local gui_editor = "subl"
local graphics   = "xnview"
local tagnames   = { "Ôâ©", "ÔÑ†", "ÔÉ∂", "ÔÄΩ", "ÔÉá", "ÔÄì", "ÔÄÅ", "ÔÄæ", "Ôáó" }
local tagnames1   = { "DC", "conky", "ÔÑõ" }

-- table of layouts to cover with awful.layout.inc, order matters.
local layout_dim = {
    awful.layout.suit.floating,
    awful.layout.suit.tile,
    awful.layout.suit.tile.left,
    awful.layout.suit.tile.bottom,
    awful.layout.suit.tile.top,
    awful.layout.suit.fair,
    awful.layout.suit.fair.horizontal,
    awful.layout.suit.spiral,
    awful.layout.suit.spiral.dwindle,
    awful.layout.suit.max,
    awful.layout.suit.max.fullscreen,
    awful.layout.suit.magnifier,
    -- awful.layout.suit.corner.nw,
    -- awful.layout.suit.corner.ne,
    -- awful.layout.suit.corner.sw,
    -- awful.layout.suit.corner.se,
}
local layouts = { layout_dim[1], layout_dim[2], layout_dim[2],
                  layout_dim[2], layout_dim[2], layout_dim[2],
                  layout_dim[1], layout_dim[1], layout_dim[1] }

-- lain
lain.layout.termfair.nmaster        = 3
lain.layout.termfair.ncol           = 1
lain.layout.termfair.center.nmaster = 3
lain.layout.termfair.center.ncol    = 1
-- }}}

-- {{{ Helper functions
local function client_menu_toggle_fn()
    local instance = nil

    return function ()
        if instance and instance.wibox.visible then
            instance:hide()
            instance = nil
        else
            instance = awful.menu.clients({ theme = { width = 250 } })
        end
    end
end
-- }}}

-- {{{ Menu
local myawesomemenu = {
    { "hotkeys", function() return false, hotkeys_popup.show_help end },
    { "manual", terminal .. " -e man awesome" },
    { "edit config", string.format("%s -e %s %s", terminal, editor, awesome.conffile) }
}
local myexit = {
    { "Shutdown", function() awful.util.spawn("kdesu systemctl poweroff")     end },
    { "Reboot",   function() awful.util.spawn("kdesu systemctl reboot")       end },
    { "Suspend",  function() awful.util.spawn("kdesu systemctl suspend")      end },
    { "Sleep",    function() awful.util.spawn("kdesu systemctl hybrid-sleep") end },
    { "Logout",   function() awesome.quit()                             end },
    { "Restart Awesome", awesome.restart }
}
local mymainmenu = freedesktop.menu.build({
    before = {
        { "Awesome", myawesomemenu, beautiful.awesome_icon },
        { "Exit", myexit, beautiful.awesome_icon },
        -- other triads can be put here
    },
    after = {
        { "Open terminal", terminal },
        -- other triads can be put here
    }
})

mylauncher = awful.widget.launcher({ image = beautiful.launcher_icon,
                                     menu = mymainmenu })
--menubar.utils.terminal = terminal -- Set the Menubar terminal for applications that require it
-- }}}

-- {{{ Wibox
local markup = lain.util.markup

-- {{{ Keyboard layout widget
kbdcfg = {}
kbdcfg.image        = wibox.widget.imagebox()
kbdcfg.layout      = { "us", "ru" }
kbdcfg.current      = 1
kbdcfg.images       = { awful.util.getdir("config") .. "/themes/multicolor/icons/lang/icon_lang_en.png",
                        awful.util.getdir("config") .. "/themes/multicolor/icons/lang/icon_lang_ru.png" }
kbdcfg.image:set_image(awful.util.getdir("config") .. "/themes/multicolor/icons/lang/icon_lang_en.png")
dbus.request_name("session", "ru.gentoo.kbdd")
dbus.add_match("session", "interface='ru.gentoo.kbdd',member='layoutChanged'")
dbus.connect_signal("ru.gentoo.kbdd", function(...)
    kbdcfg.current = kbdcfg.current % #(kbdcfg.layout) + 1
    kbdcfg.image:set_image(kbdcfg.images[kbdcfg.current])
    end
)
-- }}}
--========= Textclock =========--
os.setlocale(os.getenv("LANG")) -- to localize the clock
--local clockicon = wibox.widget.imagebox(beautiful.widget_clock)
--local mytextclock = wibox.widget.textclock(markup.font("Hack 9", markup("#80d9d8", "üïì %a %d %b ")) .. markup.font("Hack 13", markup("#de5e1e", " %H:%M ")))
local mytextclock = wibox.widget.textclock("<span color=\"#de5e1e\" font=\"xos4 Terminus Bold 19\">%H:%M:%S</span>", 1)
local myclock_t = awful.tooltip({
         objects = { mytextclock },
         delay_show = 0,
         timer_function = function()
            return os.date("<span color=\"#de5e1e\" font=\"xos4 Terminus Bold 14\">%A %d %B %Y</span>")
          end,
})
-- Calendar
----lain.widgets.calendar.attach(mytextclock, { font_size = 10 })
lain.widgets.calendar({
    attach_to = { mytextclock },
    notification_preset = {
        font = "xos4 Terminus Bold 12",
        bg   = beautiful.widget_bg
}})
--========= Textclock =========--
--========= Weather =========--ConkyWeather bold 11
--local weathericon = wibox.widget.imagebox(beautiful.widget_weather)
local myweather = lain.widgets.weather({
    city_id = 520494, -- placeholder
    weather_na_markup = markup("#80d9d8", "N/A "),
    notification_preset = { font = "xos4 Terminus Bold 12", bg = beautiful.widget_bg },
    settings = function()
        descr = weather_now["weather"][1]["description"]:lower()
        units = math.floor(weather_now["main"]["temp"])
        icons = weather_now["weather"][1]["icon"] .. ".png"
        --widget:set_markup(markup.font("Hack 9", markup("#80d9d8", "ÔÉÇ " .. descr .. " | " .. units .. "¬∞C ")))
        widget:set_markup(markup.font("xos4 Terminus Bold 11", markup("#80d9d8", "ÔÉÇ " .. units .. "¬∞C ")))
    end
})
--========= Weather =========--
--========= fs =========--
--local fsicon = wibox.widget.imagebox(beautiful.widget_fs)
local fsroot = lain.widgets.fs({
    options = "--exclude-type=tmpfs",
    notification_preset = { font = "xos4 Terminus Bold 12", bg = beautiful.widget_bg },
    settings  = function()
        widget:set_markup(markup.font("xos4 Terminus Bold 11", markup("#80d9d8", "ÔÉá " .. fs_now.used .. "% ")))
    end
})
--========= fs =========--
--========= CPU =========--
--local cpuicon = wibox.widget.imagebox(beautiful.widget_cpu)
local cpu = lain.widgets.cpu({
    settings = function()
        widget:set_markup(markup.font("xos4 Terminus Bold 11", markup("#80d9d8", "ÔÇ† " .. cpu_now.usage .. "% ")))
    end
})
---------- cpu freq
local function cpufreq(whichcpu)
  local file = io.open("/sys/devices/system/cpu/" .. whichcpu .. "/cpufreq/scaling_cur_freq", "r")
  local cpufreq = file:read("*n")
  file:close()
  return cpufreq / 1000
end
---------- cputmp()
local function cputemp()
  local file = io.open("/sys/class/hwmon/hwmon2/temp1_input", "r")
  local output = file:read("*n")
  file:close()
  return output / 1000
end
---------- cpugov()
local helpers = require("vicious.helpers")
local function cpugov(warg)
    local _cpufreq = helpers.pathtotable("/sys/devices/system/cpu/"..warg.."/cpufreq")
    local governor_state = {
       ["ondemand\n"]     = "‚ÜØ",
       ["powersave\n"]    = "‚åÅ",
       ["userspace\n"]    = "¬§",
       ["performance\n"]  = "‚ö°",
       ["conservative\n"] = "‚äö"
    }
    local governor = _cpufreq.scaling_governor
    governor = governor_state[governor] or governor or "N/A"

    return governor
end
---------- cpu popup
mycpu_t = awful.tooltip({
         objects = { cpu.widget },
        timer_function = function()
            mycpu_t:set_text(
            " CPU 0: " .. cpugov("cpu0") .. " " .. cpufreq("cpu0") .. " Mhz \n" ..
            " CPU 1: " .. cpugov("cpu1") .. " " ..  cpufreq("cpu1") .. " Mhz \n" ..
            " CPU 2: " .. cpugov("cpu2") .. " " ..  cpufreq("cpu2") .. " Mhz \n" ..
            " CPU 3: " .. cpugov("cpu3") .. " " ..  cpufreq("cpu3") .. " Mhz \n" ..
            " Temp: " .. cputemp() .. " ¬∞C")
          end,
})
--========= CPU =========--font   = "xos4 Terminus Bold 12",
--========= Coretemp =========--
local tempicon = wibox.widget.imagebox(beautiful.widget_temp)
local temp = lain.widgets.temp({
    settings = function()
        widget:set_markup(markup.font("Hack 9", markup("#f1af5f", coretemp_now .. "¬∞C ")))
    end
})
--========= Coretemp =========--
--========= Net =========--
--'<span color="#CC9393"><b><big>‚Üì</big></b>${total down_mb} MB</span>  <span color="#7F9F7F"><b><big>‚Üë</big></b>${total up_kb} KB</span>'
--local netdownicon = wibox.widget.imagebox(beautiful.widget_netdown)
local netdowninfo = wibox.widget.textbox()
--local netupicon = wibox.widget.imagebox(beautiful.widget_netup)
local netupinfo = lain.widgets.net({
    settings = function()
        if iface ~= "network off" and
           string.match(myweather.widget.text, "N/A")
        then
            myweather.update()
        end

        widget:set_markup(markup.font("Hack 9", markup("#e54c62", "‚¨Ü " .. net_now.sent .. " ")))
        netdowninfo:set_markup(markup.font("Hack 9", markup("#87af5f", "‚¨á " .. net_now.received .. " ")))
    end
})
--========= Net =========--
--========= Mem =========--
--local memicon = wibox.widget.imagebox(beautiful.widget_mem)
local memory = lain.widgets.mem({
    settings = function()
        widget:set_markup(markup.font("xos4 Terminus Bold 11", markup("#80d9d8", "Ôãõ " .. mem_now.used .. "M ")))
    end
})
--========= Mem =========--
--========= MPD =========--
local mpdicon = wibox.widget.imagebox()
local mpdwidget = lain.widgets.mpd({
    settings = function()
        mpd_notification_preset = {
            text = string.format("%s [%s] - %s\n%s", mpd_now.artist,
                   mpd_now.album, mpd_now.date, mpd_now.title)
        }

        if mpd_now.state == "play" then
            artist = mpd_now.artist .. " > "
            title  = mpd_now.title .. " "
            mpdicon:set_image(beautiful.widget_note_on)
        elseif mpd_now.state == "pause" then
            artist = "mpd "
            title  = "paused "
        else
            artist = ""
            title  = ""
            --mpdicon:set_image() -- not working in 4.0
            mpdicon._private.image = nil
            mpdicon:emit_signal("widget::redraw_needed")
            mpdicon:emit_signal("widget::layout_changed")
        end
        widget:set_markup(markup.font("Hack 9", markup("#e54c62", artist)) .. markup.font("Hack 9", markup("#b2b2b2", title)))
    end
})
--========= MPD =========--
--========= Audio =========--
local volumewidget = wibox.widget{
      text   = pulseaudio.volume_info(),
      widget = wibox.widget.textbox,
      font   = "xos4 Terminus Bold 12",
}
local volumewidget1 = wibox.widget{
      max_value     = 112,
      forced_height = 20,
      forced_width  = 70,
      bar_shape     = gears.shape.rounded_rect,
      bar_height    = 3,
      bar_color     = beautiful.base03,
      handle_color  = "#69FFFF",
      handle_shape  = gears.shape.circle,
      value         = pulseaudio.volume_info_for_bar(),
      widget        = wibox.widget.slider,
}

volumewidget1:buttons(awful.util.table.join(
  awful.button({ }, 2, function() pulseaudio.volume_mute(); volumewidget1.value = pulseaudio.volume_info_for_bar() end),
  awful.button({ }, 3, function() awful.util.spawn("pavucontrol") end),
  awful.button({ }, 4, function() pulseaudio.volume_change("+3db"); volumewidget1.value = pulseaudio.volume_info_for_bar() end),
  awful.button({ }, 5, function() pulseaudio.volume_change("-3db"); volumewidget1.value = pulseaudio.volume_info_for_bar() end)
))

volumetimer = timer({ timeout = 31 })
volumetimer:add_signal("timeout", function() volumewidget.text = pulseaudio.volume_info() end)
volumetimer:start()
volumetimer1 = timer({ timeout = 31 })
volumetimer1:add_signal("widget::redraw_needed", function() volumewidget1.value = pulseaudio.volume_info_for_bar() end)
volumetimer1:start()
--========= Audio =========--
--========= PKG =========--
local capi = {
    mouse = mouse,
    screen = screen
}
-- {{{ display
-- formats the lines for the notify
local function display()
    local lines = "<u>Pacman Updates:</u>\n"
    local f = io.popen("yaourt -Qua", "r")
    local s = f:read('*all')
    line = lines .. "\n" .. s .. "\n"
    f:close()
    return line
end
-- }}}

local pkg_upd_icons = wibox.widget.textbox()
  pkg_upd_icons:set_markup(markup.font("PacFont Bold 11", markup("#80d9d8", "C--- ")))
  pkg_upd_icons:connect_signal('mouse::enter', function ()
        usage = naughty.notify({
        text = string.format('<span font_desc="%s">%s</span>', "xos4 Terminus Bold 11", display()),
        timeout = 0,
        hover_timeout = 0.5,
        screen = capi.mouse.screen
        })
    end)
    pkg_upd_icons:connect_signal('mouse::leave', function () naughty.destroy(usage) end)

local pkg_upd_vicious = wibox.widget.textbox()
    vicious.register(pkg_upd_vicious, vicious.widgets.pkg, "$1", 10, "Arch")
--========= PKG =========--
-- Create a wibox for each screen and add it
pkg_upd_vicious:buttons(
    awful.button({ }, 1, function () awful.util.spawn('uxterm -geometry 90x10 -T Updating -e bash -c "sudo yaourt -Sy && pauseme"') end)
)
local taglist_buttons = awful.util.table.join(
                    awful.button({ }, 1, function(t) t:view_only() end),
                    awful.button({ modkey }, 1, function(t)
                                              if client.focus then
                                                  client.focus:move_to_tag(t)
                                              end
                                          end),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, function(t)
                                              if client.focus then
                                                  client.focus:toggle_tag(t)
                                              end
                                          end),
                    awful.button({ }, 4, function(t) awful.tag.viewnext(t.screen) end),
                    awful.button({ }, 5, function(t) awful.tag.viewprev(t.screen) end)
                )

local tasklist_buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                              if c == client.focus then
                                                  c.minimized = true
                                              else
                                                  -- Without this, the following
                                                  -- :isvisible() makes no sense
                                                  c.minimized = false
                                                  if not c:isvisible() and c.first_tag then
                                                      c.first_tag:view_only()
                                                  end
                                                  -- This will also un-minimize
                                                  -- the client, if needed
                                                  client.focus = c
                                                  c:raise()
                                              end
                                          end),
                     awful.button({ }, 3, client_menu_toggle_fn()),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                          end))
--[[ –û–¥–∏–Ω–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
local function set_wallpaper(s)
    -- Wallpaper
    if beautiful.wallpaper then
        local wallpaper = beautiful.wallpaper
        -- If wallpaper is a function, call it with the screen
        if type(wallpaper) == "function" then
            wallpaper = wallpaper(s)
        end
        gears.wallpaper.maximized(wallpaper, s, true)
    end
end

-- Re-set wallpaper when a screen's geometry changes (e.g. different resolution)
screen.connect_signal("property::geometry", set_wallpaper)
]]--
-- ===============

awful.screen.connect_for_each_screen(function(s)
    -- Quake application
    s.quake = lain.util.quake({ app = terminal })

    -- Wallpaper
    -------- –û–¥–∏–Ω–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ -------set_wallpaper(s)

    -- Tags
    awful.tag(tagnames, s, layouts)


    -- Create a promptbox for each screen
    s.mypromptbox = awful.widget.prompt()
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    s.mylayoutbox = awful.widget.layoutbox(s)
    s.mylayoutbox:buttons(awful.util.table.join(
                           awful.button({ }, 1, function () awful.layout.inc( 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(-1) end),
                           awful.button({ }, 4, function () awful.layout.inc( 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(-1) end)))
    -- Create a taglist widget
    --s.mytaglist = awful.widget.taglist(s, awful.widget.taglist.filter.all, taglist_buttons)
    s.mytaglist = awful.widget.taglist(s, awful.widget.taglist.filter.all, taglist_buttons)

    -- Create a tasklist widget
    s.mytasklist = awful.widget.tasklist(s, awful.widget.tasklist.filter.currenttags, tasklist_buttons, { bg_focus = "#00000000" })

    -- Create the wibox
    s.mywibox = awful.wibar({ position = "top", screen = s, height = 20 })

    -- Add widgets to the wibox
    s.mywibox:setup {
        layout = wibox.layout.align.horizontal,
        { -- Left widgets
            layout = wibox.layout.align.horizontal,
            {
              {
                {
                  {
                    widget = mylauncher
                  },
                  left   = 5,
                  right  = 15,
                  top    = 0,
                  bottom = 0,
                  widget = wibox.container.margin
                },
                bg = beautiful.base02,
                set_shape = function(cr, width, height)
                  gears.shape.rounded_bar(cr, width, height)
                end,
                widget = wibox.container.background
              },
              left   = -10,
              right  = -13,
              top    = 0,
              bottom = 0,
              widget = wibox.container.margin
            },
            {
              {
                {
                  {
                    widget = s.mytaglist,
                  },
                  left   = 15,
                  right  = 15,
                  top    = 0,
                  bottom = 0,
                  widget = wibox.container.margin
                },
                bg = beautiful.base02,
                set_shape = function(cr, width, height)
                  gears.shape.rounded_bar(cr, width, height)
                end,
                widget = wibox.container.background
              },
              left   = 0,
              right  = -13,
              top    = 0,
              bottom = 0,
              widget = wibox.container.margin
            },
            {
              {
                {
                  {
                    widget = s.mypromptbox
                  },
                  left   = 15,
                  right  = 15,
                  top    = 0,
                  bottom = 0,
                  widget = wibox.container.margin
                },
                bg = beautiful.base03,
                set_shape = function(cr, width, height)
                  gears.shape.rounded_bar(cr, width, height)
                end,
                widget = wibox.container.background
              },
              left   = 0,
              right  = -13,
              top    = 0,
              bottom = 0,
              widget = wibox.container.margin
            },
        },
        --s.mytasklist, -- Middle widget        , ,
        nil,
        { -- Right widgets
            layout = wibox.layout.fixed.horizontal,

            {
              {
                {
                  {
                    widget = wibox.widget.systray()
                  },
                  left   = 15,
                  right  = 15,
                  top    = 2,
                  bottom = 2,
                  widget = wibox.container.margin
                },
                bg = beautiful.base02,
                set_shape = function(cr, width, height)
                  gears.shape.rounded_bar(cr, width, height, (height / 2) * (-1))
                  --gears.shape.powerline(cr, width, height, (height / 2) * (-1))
                end,
                widget = wibox.container.background
              },
              left   = 0,
              right  = -13,
              top    = 0,
              bottom = 0,
              widget = wibox.container.margin
            },
            {
              {
                {
                  {
                    widget = pkg_upd_icons
                  },
                  left   = 9,
                  right  = 15,
                  top    = 2,
                  bottom = 2,
                  widget = wibox.container.margin
                },
                bg = beautiful.base03,
                set_shape = function(cr, width, height)
                  gears.shape.rounded_bar(cr, width, height, (height / 2) * (-1))
                  --gears.shape.powerline(cr, width, height, (height / 2) * (-1))
                end,
                widget = wibox.container.background
              },
              left   = 0,
              right  = -23,
              top    = 0,
              bottom = 0,
              widget = wibox.container.margin
            },
            {
              {
                {
                  {
                    widget = pkg_upd_vicious
                  },
                  left   = 5,
                  right  = 19,
                  top    = 2,
                  bottom = 2,
                  widget = wibox.container.margin
                },
                bg = beautiful.base03,
                set_shape = function(cr, width, height)
                  gears.shape.rounded_bar(cr, width, height, (height / 2) * (-1))
                  --gears.shape.powerline(cr, width, height, (height / 2) * (-1))
                end,
                widget = wibox.container.background
              },
              left   = 0,
              right  = -13,
              top    = 0,
              bottom = 0,
              widget = wibox.container.margin
            },






            {
              {
                {
                  {
                    widget = volumewidget
                  },
                  left   = 10,
                  right  = 17,
                  top    = 0,
                  bottom = 0,
                  widget = wibox.container.margin
                },
                bg = beautiful.base02,
                set_shape = function(cr, width, height)
                  gears.shape.rounded_bar(cr, width, height, (height / 2) * (-1))
                end,
                widget = wibox.container.background
              },
              left   = 0,
              right  = -13,
              top    = 0,
              bottom = 0,
              widget = wibox.container.margin
            },
            {
              {
                {
                  {
                    widget = volumewidget1
                  },
                  left   = 0,
                  right  = 20,
                  top    = 0,
                  bottom = 0,
                  widget = wibox.container.margin
                },
                bg = beautiful.base02,
                set_shape = function(cr, width, height)
                  gears.shape.rounded_bar(cr, width, height, (height / 2) * (-1))
                end,
                widget = wibox.container.background
              },
              left   = 0,
              right  = -13,
              top    = 0,
              bottom = 0,
              widget = wibox.container.margin
            },
            {
              {
                {
                  {
                    widget = memory.widget
                  },
                  left   = 10,
                  right  = 10,
                  top    = 0,
                  bottom = 0,
                  widget = wibox.container.margin
                },
                bg = beautiful.base03,
                set_shape = function(cr, width, height)
                  gears.shape.rounded_bar(cr, width, height, (height / 2) * (-1))
                end,
                widget = wibox.container.background
              },
              left   = 0,
              right  = -13,
              top    = 0,
              bottom = 0,
              widget = wibox.container.margin
            },
            {
              {
                {
                  {
                    widget = cpu.widget
                  },
                  left   = 10,
                  right  = 10,
                  top    = 0,
                  bottom = 0,
                  widget = wibox.container.margin
                },
                bg = beautiful.base02,
                set_shape = function(cr, width, height)
                  gears.shape.rounded_bar(cr, width, height, (height / 2) * (-1))
                end,
                widget = wibox.container.background
              },
              left   = 0,
              right  = -13,
              top    = 0,
              bottom = 0,
              widget = wibox.container.margin
            },
            {
              {
                {
                  {
                    widget = fsroot.widget
                  },
                  left   = 10,
                  right  = 10,
                  top    = 0,
                  bottom = 0,
                  widget = wibox.container.margin
                },
                bg = beautiful.base03,
                set_shape = function(cr, width, height)
                  gears.shape.rounded_bar(cr, width, height, (height / 2) * (-1))
                end,
                widget = wibox.container.background
              },
              left   = 0,
              right  = -13,
              top    = 0,
              bottom = 0,
              widget = wibox.container.margin
            },
            {
              {
                {
                  {
                    widget = myweather.widget
                  },
                  left   = 10,
                  right  = 10,
                  top    = 0,
                  bottom = 0,
                  widget = wibox.container.margin
                },
                bg = beautiful.base02,
                set_shape = function(cr, width, height)
                  gears.shape.rounded_bar(cr, width, height, (height / 2) * (-1))
                end,
                widget = wibox.container.background
              },
              left   = 0,
              right  = -13,
              top    = 0,
              bottom = 0,
              widget = wibox.container.margin
            },
            {
              {
                {
                  {
                    widget = mytextclock
                  },
                  left   = 10,
                  right  = 17,
                  top    = 0,
                  bottom = 0,
                  widget = wibox.container.margin
                },
                bg = beautiful.base03,
                set_shape = function(cr, width, height)
                  gears.shape.rounded_bar(cr, width, height)
                end,
                widget = wibox.container.background
              },
              left   = 0,
              right  = -13,
              top    = 0,
              bottom = 0,
              widget = wibox.container.margin
            },
            {
              {
                {
                  {
                    widget = kbdcfg.image
                  },
                  left   = 0,
                  right  = 10,
                  top    = 0,
                  bottom = 0,
                  widget = wibox.container.margin
                },
                bg = beautiful.base02,
                set_shape = function(cr, width, height)
                  gears.shape.partially_rounded_rect(cr, width, height)
                end,
                widget = wibox.container.background
              },
              left   = 0,
              right  = -13,
              top    = 0,
              bottom = 0,
              widget = wibox.container.margin
            },
        },
    }

    -- Create the bottom wibox
    s.mybottomwibox = awful.wibar({ position = "bottom", screen = s, border_width = 0, height = 20 })

    -- Add widgets to the bottom wibox
    s.mybottomwibox:setup {
        layout = wibox.layout.align.horizontal,
        { -- Left widgets
            layout = wibox.layout.fixed.horizontal,
        },
        s.mytasklist, -- Middle widget
        { -- Right widgets
            layout = wibox.layout.fixed.horizontal,
            s.mylayoutbox,
        },
    }

end)
--[[
--========= vicious =========--
local net_vicious = wibox.widget.textbox()
vicious.register(net_vicious, vicious.widgets.net, "‚¨á <span font=\"Hack 10\">${enp3s0 carrier}M</span> <span color=\"#ffffff\"> ‚ú¶ </span>‚¨Ü <span font=\"Hack 10\">${enp3s0 rx_mb}M</span>", 1)

local mem_vicious = wibox.widget.textbox()
    vicious.register(mem_vicious, vicious.widgets.mem, markup.big(markup.bold("Mem:$1% $2Mb Total:$3Mb Free:$4Mb $9")))

local pkg_upd_vicious = wibox.widget.textbox()
    vicious.register(pkg_upd_vicious, vicious.widgets.pkg, "$1", 1, "Arch")

local cpufreq_vicious = wibox.widget.textbox()
    vicious.register(cpufreq_vicious, vicious.widgets.cpufreq, "$5 $1 $2 $3 $4", 1, "cpu0")
    -- CPU usage widget
local cpuwidget = awful.widget.graph()
cpuwidget:set_width(50)
cpuwidget:set_height(30)
cpuwidget:set_background_color("#494B4F")
cpuwidget:set_color("#FF5656")

cpuwidget_t = awful.tooltip({ objects = { cpuwidget.widget },})

-- Register CPU widget
vicious.register(cpuwidget, vicious.widgets.cpu,
                    function (widget, args)
                        cpuwidget_t:set_text("CPU Usage: " .. args[1] .. "%")
                        return args[1]
                    end)
--========= vicious =========--
--========= desktop_conky =========--
for s in screen do
    -- do something

    my_desktop_conky = wibox({ type = "desktop", visible = true, ontop = false, bg = "#5E1E00", position = "right", screen = s, height = 50})
      my_desktop_conky:geometry({ x = 1000, y = 100, width = 300, height = 450 })
        my_desktop_conky:setup{
        layout = wibox.layout.align.vertical,
            {
              {
                widget = net_vicious,
              },
              left   = 65,
              right  = 0,
              top    = 0,
              bottom = 40,
              widget = wibox.container.margin
            },
            {
              {
                widget = mem_vicious,
              },
              left   = 5,
              right  = 0,
              top    = 0,
              bottom = 80,
              widget = wibox.container.margin
            },
            {
              {
                widget = cpuwidget,
              },
              left   = 0,
              right  = 0,
              top    = 0,
              bottom = 70,
              widget = wibox.container.margin
            },
            {
              {
                widget = cpufreq_vicious,
              },
              left   = 25,
              right  = 0,
              top    = 0,
              bottom = 40,
              widget = wibox.container.margin
            }
        }
end
--========= desktop_conky =========--
-- ====================
-- }}}
]]-----------------------------------------------------------------------------------
-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(

    -- Take a screenshot
    -- https://github.com/copycat-killer/dots/blob/master/bin/screenshot
    awful.key({ altkey }, "p", function() os.execute("screenshot") end),

    -- Hotkeys
    awful.key({ modkey,           }, "s",      hotkeys_popup.show_help,
              {description="show help", group="awesome"}),
    -- Tag browsing
    awful.key({ modkey,           }, "Left",   awful.tag.viewprev,
              {description = "view previous", group = "tag"}),
    awful.key({ modkey,           }, "Right",  awful.tag.viewnext,
              {description = "view next", group = "tag"}),
    awful.key({ modkey,           }, "Escape", awful.tag.history.restore,
              {description = "go back", group = "tag"}),

    -- Non-empty tag browsing
    awful.key({ altkey }, "Left", function () lain.util.tag_view_nonempty(-1) end,
              {description = "view  previous nonempty", group = "tag"}),
    awful.key({ altkey }, "Right", function () lain.util.tag_view_nonempty(1) end,
              {description = "view  previous nonempty", group = "tag"}),

    -- Default client focus
    awful.key({ altkey,           }, "j",
        function ()
            awful.client.focus.byidx( 1)
        end,
        {description = "focus next by index", group = "client"}
    ),
    awful.key({ altkey,           }, "k",
        function ()
            awful.client.focus.byidx(-1)
        end,
        {description = "focus previous by index", group = "client"}
    ),

    -- By direction client focus
    awful.key({ modkey }, "j",
        function()
            awful.client.focus.bydirection("down")
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey }, "k",
        function()
            awful.client.focus.bydirection("up")
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey }, "h",
        function()
            awful.client.focus.bydirection("left")
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey }, "l",
        function()
            awful.client.focus.bydirection("right")
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "w", function () mymainmenu:show() end,
              {description = "show main menu", group = "awesome"}),

    -- Layout manipulation
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end,
              {description = "swap with next client by index", group = "client"}),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end,
              {description = "swap with previous client by index", group = "client"}),
    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end,
              {description = "focus the next screen", group = "screen"}),
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end,
              {description = "focus the previous screen", group = "screen"}),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto,
              {description = "jump to urgent client", group = "client"}),
    awful.key({ modkey,           }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end,
        {description = "go back", group = "client"}),

    -- Show/Hide Wibox
    awful.key({ modkey }, "b", function ()
        for s in screen do
            s.mywibox.visible       = not s.mywibox.visible
            s.mybottomwibox.visible = not s.mybottomwibox.visible
        end
    end),

    -- On the fly useless gaps change
    awful.key({ altkey, "Control" }, "+", function () lain.util.useless_gaps_resize(1) end),
    awful.key({ altkey, "Control" }, "-", function () lain.util.useless_gaps_resize(-1) end),

    -- Dynamic tagging
    awful.key({ modkey, "Shift" }, "n", function () lain.util.add_tag() end),
    awful.key({ modkey, "Shift" }, "r", function () lain.util.rename_tag() end),
    awful.key({ modkey, "Shift" }, "Left", function () lain.util.move_tag(1) end),   -- move to next tag
    awful.key({ modkey, "Shift" }, "Right", function () lain.util.move_tag(-1) end), -- move to previous tag
    awful.key({ modkey, "Shift" }, "d", function () lain.util.delete_tag() end),

    -- Standard program
    awful.key({ modkey,           }, "Return", function () awful.spawn(terminal) end,
              {description = "open a terminal", group = "launcher"}),
    awful.key({ modkey, "Control" }, "r", awesome.restart,
              {description = "reload awesome", group = "awesome"}),
    awful.key({ modkey, "Shift"   }, "q", awesome.quit,
              {description = "quit awesome", group = "awesome"}),

    awful.key({ altkey, "Shift"   }, "l",     function () awful.tag.incmwfact( 0.05)          end,
              {description = "increase master width factor", group = "layout"}),
    awful.key({ altkey, "Shift"   }, "h",     function () awful.tag.incmwfact(-0.05)          end,
              {description = "decrease master width factor", group = "layout"}),
    awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1, nil, true) end,
              {description = "increase the number of master clients", group = "layout"}),
    awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1, nil, true) end,
              {description = "decrease the number of master clients", group = "layout"}),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1, nil, true)    end,
              {description = "increase the number of columns", group = "layout"}),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1, nil, true)    end,
              {description = "decrease the number of columns", group = "layout"}),
    awful.key({ modkey,           }, "space", function () awful.layout.inc( 1)                end,
              {description = "select next", group = "layout"}),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(-1)                end,
              {description = "select previous", group = "layout"}),

    awful.key({ modkey, "Control" }, "n",
              function ()
                  local c = awful.client.restore()
                  -- Focus restored client
                  if c then
                      client.focus = c
                      c:raise()
                  end
              end,
              {description = "restore minimized", group = "client"}),

    -- Dropdown application
    awful.key({ modkey, }, "z", function () awful.screen.focused().quake:toggle() end),

    -- Widgets popups
    awful.key({ altkey, }, "c", function () lain.widgets.calendar.show(7) end),
    awful.key({ altkey, }, "h", function () fsroot.show(7) end),
    awful.key({ altkey, }, "w", function () myweather.show(7) end),

    -- Audio
    awful.key({ modkey, "Shift"}, "p", function () pulseaudio.cycle_devices(); volumewidget.text = pulseaudio.volume_info() end),
    awful.key({}, "XF86AudioMute", function() pulseaudio.volume_mute(); volumewidget.text = pulseaudio.volume_info() end),
    awful.key({}, "XF86AudioLowerVolume", function() pulseaudio.volume_change("-3db"); volumewidget.text = pulseaudio.volume_info(); volumewidget1.value = pulseaudio.volume_info_for_bar() end),
    awful.key({}, "XF86AudioRaiseVolume", function() pulseaudio.volume_change("+3db"); volumewidget.text = pulseaudio.volume_info(); volumewidget1.value = pulseaudio.volume_info_for_bar() end),

    -- MPD control
    awful.key({ altkey, "Control" }, "Up",
        function ()
            awful.spawn.with_shell("mpc toggle || ncmpc toggle || pms toggle")
            mpdwidget.update()
        end),
    awful.key({ altkey, "Control" }, "Down",
        function ()
            awful.spawn.with_shell("mpc stop || ncmpc stop || pms stop")
            mpdwidget.update()
        end),
    awful.key({ altkey, "Control" }, "Left",
        function ()
            awful.spawn.with_shell("mpc prev || ncmpc prev || pms prev")
            mpdwidget.update()
        end),
    awful.key({ altkey, "Control" }, "Right",
        function ()
            awful.spawn.with_shell("mpc next || ncmpc next || pms next")
            mpdwidget.update()
        end),
    --]]

    -- Copy primary to clipboard
    awful.key({ modkey }, "c", function () os.execute("xsel | xsel -b") end),

    -- User programs
    awful.key({ modkey }, "q", function () awful.spawn(browser) end),
    awful.key({ modkey }, "e", function () awful.spawn(gui_editor) end),
    awful.key({ modkey }, "g", function () awful.spawn(graphics) end),

    -- Default
    -- Prompt
    awful.key({ modkey }, "r", function () awful.screen.focused().mypromptbox:run() end,
              {description = "run prompt", group = "launcher"}),

    awful.key({ modkey }, "x",
              function ()
                  awful.prompt.run {
                    prompt       = "Run Lua code: ",
                    textbox      = awful.screen.focused().mypromptbox.widget,
                    exe_callback = awful.util.eval,
                    history_path = awful.util.get_cache_dir() .. "/history_eval"
                  }
              end,
              {description = "lua execute prompt", group = "awesome"}),
    -- Menubar
    awful.key({ modkey }, "p", function() menubar.show() end,
              {description = "show the menubar", group = "launcher"})
    --]]

    --[[ dmenu
    awful.key({ modkey }, "x", function ()
        awful.spawn(string.format("dmenu_run -i -fn 'Tamsyn' -nb '%s' -nf '%s' -sb '%s' -sf '%s'",
        beautiful.bg_normal, beautiful.fg_normal, beautiful.bg_focus, beautiful.fg_focus))
		end)
    --]]
)

clientkeys = awful.util.table.join(
    awful.key({ altkey, "Shift"   }, "m",      lain.util.magnify_client                         ),
    awful.key({ modkey,           }, "f",
        function (c)
            c.fullscreen = not c.fullscreen
            c:raise()
        end,
        {description = "toggle fullscreen", group = "client"}),
    awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end,
              {description = "close", group = "client"}),
    awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ,
              {description = "toggle floating", group = "client"}),
    awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end,
              {description = "move to master", group = "client"}),
    awful.key({ modkey,           }, "o",      function (c) c:move_to_screen()               end,
              {description = "move to screen", group = "client"}),
    awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end,
              {description = "toggle keep on top", group = "client"}),
    awful.key({ modkey,           }, "n",
        function (c)
            -- The client currently has the input focus, so it cannot be
            -- minimized, since minimized clients can't have the focus.
            c.minimized = true
        end ,
        {description = "minimize", group = "client"}),
    awful.key({ modkey,           }, "m",
        function (c)
            c.maximized = not c.maximized
            c:raise()
        end ,
        {description = "maximize", group = "client"})
)

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, 9 do
    globalkeys = awful.util.table.join(globalkeys,
        -- View tag only.
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = awful.screen.focused()
                        local tag = screen.tags[i]
                        if tag then
                           tag:view_only()
                        end
                  end,
                  {description = "view tag #"..i, group = "tag"}),
        -- Toggle tag display.
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = awful.screen.focused()
                      local tag = screen.tags[i]
                      if tag then
                         awful.tag.viewtoggle(tag)
                      end
                  end,
                  {description = "toggle tag #" .. i, group = "tag"}),
        -- Move client to tag.
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus then
                          local tag = client.focus.screen.tags[i]
                          if tag then
                              client.focus:move_to_tag(tag)
                          end
                     end
                  end,
                  {description = "move focused client to tag #"..i, group = "tag"}),
        -- Toggle tag on focused client.
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus then
                          local tag = client.focus.screen.tags[i]
                          if tag then
                              client.focus:toggle_tag(tag)
                          end
                      end
                  end,
                  {description = "toggle focused client on tag #" .. i, group = "tag"})
    )
end

clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ modkey }, 1, awful.mouse.client.move),
    awful.button({ modkey }, 3, awful.mouse.client.resize))

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
-- Rules to apply to new clients (through the "manage" signal).
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = awful.client.focus.filter,
                     raise = true,
                     keys = clientkeys,
                     buttons = clientbuttons,
                     screen = awful.screen.preferred,
                     placement = awful.placement.no_overlap+awful.placement.no_offscreen,
                     size_hints_honor = false
     }
    },

    -- Titlebars
    { rule_any = { type = { "dialog", "normal" } },
      properties = { titlebars_enabled = false } },
    { rule = { class = "Gimp", role = "gimp-image-window" },
          properties = { maximized_horizontal = true,
                         maximized_vertical = true } },
    { rule = { class = "Termite" },
            properties = {opacity = 0.8 } },
--- Screen 1
    { rule = { class = "Pale moon" },
          properties = { screen = 1, tag = tagnames[1], switchtotag = true } },
    { rule = { class = "Firefox" },
          properties = { screen = 1, tag = tagnames[1], switchtotag = true } },
    { rule = { class = "Vivaldi-stable" },
          properties = { screen = 1, tag = tagnames[1] } },
    { rule = { class = "konsole" },
          properties = { screen = 1, tag = tagnames[2], switchtotag = true } },
    { rule = { class = "qterminal" },
            properties = { screen = 1, tag = tagnames[2], switchtotag = true, opacity = 0.85 } },
    { rule = { class = "Subl" },
          properties = { screen = 1, tag = tagnames[3], switchtotag = true } },
    { rule = { class = "Vlc" },
          properties = { screen = 1, tag = tagnames[4], switchtotag = true } },
    { rule = { class = "dolphin" },
          properties = { tag = tagnames[5], switchtotag = true } },
--- Screen 2
    { rule = { class = "Doublecmd" },
          properties = { screen = 2, tag = tagnames[5], switchtotag = true } },
    { rule = { class = "URxvt" },
          properties = { screen = 2, tag = tagnames[2], switchtotag = true } },
    { rule = { class = "ktorrent" },
          properties = { screen = 2, tag = tagnames[1], switchtotag = true } },
    { rule = { class = "Conky" },
          properties = { screen = 2, tag = tagnames[6], switchtotag = false, border_width = 0 } },
}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.connect_signal("manage", function (c)
    -- Set the windows at the slave,
    -- i.e. put it at the end of others instead of setting it master.
    -- if not awesome.startup then awful.client.setslave(c) end

    if awesome.startup and
      not c.size_hints.user_position
      and not c.size_hints.program_position then
        -- Prevent clients from being unreachable after screen count changes.
        awful.placement.no_offscreen(c)
    end
end)

-- Add a titlebar if titlebars_enabled is set to true in the rules.
client.connect_signal("request::titlebars", function(c)
    -- buttons for the titlebar
    local buttons = awful.util.table.join(
        awful.button({ }, 1, function()
            client.focus = c
            c:raise()
            awful.mouse.client.move(c)
        end),
        awful.button({ }, 3, function()
            client.focus = c
            c:raise()
            awful.mouse.client.resize(c)
        end)
    )

    awful.titlebar(c, {size = 16}) : setup {
        { -- Left
            awful.titlebar.widget.iconwidget(c),
            buttons = buttons,
            layout  = wibox.layout.fixed.horizontal
        },
        { -- Middle
            { -- Title
                align  = "center",
                widget = awful.titlebar.widget.titlewidget(c)
            },
            buttons = buttons,
            layout  = wibox.layout.flex.horizontal
        },
        { -- Right
            awful.titlebar.widget.floatingbutton (c),
            awful.titlebar.widget.maximizedbutton(c),
            awful.titlebar.widget.stickybutton   (c),
            awful.titlebar.widget.ontopbutton    (c),
            awful.titlebar.widget.closebutton    (c),
            layout = wibox.layout.fixed.horizontal()
        },
        layout = wibox.layout.align.horizontal
    }
end)

-- Enable sloppy focus, so that focus follows mouse.

client.connect_signal("mouse::enter", function(c)
    if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
        and awful.client.focus.filter(c) then
        client.focus = c
    end
end)


-- No border for maximized clients
client.connect_signal("focus",
    function(c)
        if c.maximized_horizontal == true and c.maximized_vertical == true then
            c.border_width = 0
        -- no borders if only 1 client visible
        elseif #awful.client.visible(mouse.screen) > 1 then
            c.border_width = beautiful.border_width
            c.border_color = beautiful.border_focus
        end
    end)
client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}
wp_handle = require("wp_slideshow"):new("/home/jacka/Pictures/art/222/", "fit", 180)
wp_handle:run()