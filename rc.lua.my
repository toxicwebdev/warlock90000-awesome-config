-- {{{ Required libraries
local gears         = require("gears")
local awful         = require("awful")
                      require("awful.autofocus")
local wibox         = require("wibox")
local beautiful     = require("beautiful")
local naughty       = require("naughty")
local lain          = require("lain")
local freedesktop   = require("freedesktop")
local hotkeys_popup = require("awful.hotkeys_popup").widget
local tyrannical    = require("tyrannical")
local vicious       = require("vicious")
--local xdg_menu      = require("archmenu") -- (yaourt -S archlinux-xdg-menu)
--local vicious_contrib = require("vicious.contrib")
local radical       = require("radical")
--local blingbling    = require("blingbling")
-- }}}

-- {{{ Error handling
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end
do
    local in_error = false
    awesome.connect_signal("debug::error", function (err)
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = tostring(err) })
        in_error = false
    end)
end
-- }}}

-- {{{ Autostart applications
local function run_once(cmd)
  findme = cmd
  firstspace = cmd:find(" ")
  if firstspace then
     findme = cmd:sub(0, firstspace-1)
  end
  awful.spawn.with_shell(string.format("pgrep -u $USER -x %s > /dev/null || (%s)", findme, cmd))
end

-- {{{ Compositing
awful.spawn.with_shell("compton &")
-- }}}

awful.spawn.with_shell("hsetroot -solid \"#000000\"")

run_once("urxvtd &")

--run_once("~/bin/start.sh &")

-- {{{ SlideShow
wp_handle = require("util.wp_slideshow"):new("~/Pictures/art/222/", "fit", 60)
wp_handle:run()
-- }}}
-- {{{ Theme definitions
beautiful.init(awful.util.get_configuration_dir() .. "/themes/multicolor/theme.lua")
-- }}}

-- {{{ Variable
-- common
local modkey     = "Mod4"
local altkey     = "Mod1"
local altkey1     = "Control_L"
local terminal   = "urxvtc" or "qterminal"
local editor     = os.getenv("EDITOR") or "subl" or "vi"
os.setlocale(os.getenv("LANG"))
-- user defined
local browser    = "palemoon"
local gui_editor = "subl"
local graphics   = "xnview"
-- }}}
awful.layout.layouts = {
  awful.layout.suit.floating,
  awful.layout.suit.tile,
  awful.layout.suit.tile.left,
  awful.layout.suit.tile.bottom,
  awful.layout.suit.tile.top,
  awful.layout.suit.fair,
  awful.layout.suit.fair.horizontal,
  awful.layout.suit.spiral,
  awful.layout.suit.spiral.dwindle,
  awful.layout.suit.max,
  awful.layout.suit.max.fullscreen,
  awful.layout.suit.magnifier,
  awful.layout.suit.corner.nw,
  lain.layout.cascade,
  lain.layout.cascade.tile,
  lain.layout.centerwork,
  lain.layout.centerwork.horizontal,
  lain.layout.termfair,
  lain.layout.termfair.center,
}
-- lain
lain.layout.termfair.nmaster        = 3
lain.layout.termfair.ncol           = 1
lain.layout.termfair.center.nmaster = 3
lain.layout.termfair.center.ncol    = 1
-- }}}
local script = awful.util.get_configuration_dir() .. "/util/script/"

--== radical ==--
local exit_dialog = radical.box
  {
    item_width=62,
    item_height=32,
    style = radical.style.classic,
    border_width = 2,
    layout = radical.layout.horizontal,
    item_layout = radical.layout.centerred,
    item_style = radical.item.style.basic,
    autodiscard = false
  }

  exit_dialog.margins.top = 3
  exit_dialog.margins.bottom = 3

  exit_dialog:add_item{text="Shutdown", button1 = function() awful.util.spawn("systemctl poweroff") end}
  exit_dialog:add_item{text="Reboot", button1 = function() awful.util.spawn("systemctl reboot") end}
  exit_dialog:add_item{text="Suspend", button1 = function() awful.util.spawn("systemctl suspend") end}
  exit_dialog:add_item{text="Sleep", button1 = function() awful.util.spawn("systemctl hybrid-sleep") end}
  exit_dialog:add_item{text="Cancel", button1 = function() exit_dialog.visible = false end}

local exit_menu = radical.context {
        style      = radical.style.classic      ,
        item_style = radical.item.style.arrow_prefix ,
        item_height = 18,--48,
        width = 140,
        layout = radical.layout.vertical, --horizontal,
        border_width = 2,
        border_color = "#88aa00",
        item_layout = radical.layout.centerred
    }
  exit_menu:add_item{text="Shutdown", button1 = function() awful.util.spawn("systemctl poweroff") end}
  exit_menu:add_item{text="Reboot", button1 = function() awful.util.spawn("systemctl reboot") end}
  exit_menu:add_item{text="Suspend", button1 = function() awful.util.spawn("systemctl suspend") end}
  exit_menu:add_item{text="Sleep", button1 = function() awful.util.spawn("systemctl hybrid-sleep") end}
  exit_menu:add_item{text="Cancel", button1 = function() exit_menu.visible = false end}


local customMenu = require( "customMenu" )
local app_menu = nil
local bar_menu = radical.context {
        style      = radical.style.arrow,
        arrow_type = 0,
        item_style = radical.item.style.arrow_prefix ,
        width = 140,
        layout = radical.layout.vertical, --horizontal,
        --border_width = 2,
        --border_color = "#88aa00",
        spacing  = 3,
        item_layout = radical.layout.centerred
    }

bar_menu:add_item {
    text     = beautiful.apps_title or "Apps",
    --icon     = beautiful.launcher_icon,
    bg_used  = beautiful.bar_bg_buttons or beautiful.menu_bg_normal,
    --spacing  = 4,
    sub_menu = function()
        if not app_menu then
            app_menu = customMenu.appmenu (
            { -- Main menu
                max_items   = 20,
                style       = beautiful.button_menu_style or radical.style.arrow,
                item_style  = beautiful.button_menu_menu_item_style or radical.item.style.classic,
            }
           ,{ -- Sub menus
                max_items   = 20,
                style       = beautiful.button_menu_style or radical.style.arrow,
                item_style  = beautiful.button_menu_menu_item_style or radical.item.style.classic
            })
        end
        return app_menu
    end
}
bar_menu:add_item{text="Wine",sub_menu = function()
  local smenu = radical.context{}
    smenu:add_item{text="TC_Aion", button1 = function() awful.util.spawn(script .. "tc_aion") end}
    smenu:add_item{text="TC", button1 = function() awful.util.spawn(script .. "tc") end}
    smenu:add_item{text="Photoshop CS6 x32", button1 = function() awful.util.spawn(script .. "p_shop") end}
    smenu:add_item{text="Aion", button1 = function() awful.util.spawn(script .. "aion") end}
    smenu:add_item{text="Tera", button1 = function() awful.util.spawn(script .. "tera") end}
    smenu:add_item{text="Tera1", button1 = function() awful.util.spawn(script .. "tera1") end}
    smenu:add_item{text="Rift", button1 = function() awful.util.spawn(script .. "rift") end}
    smenu:add_item{text="Cancel", icon = beautiful.cancel, button1 = function() smenu.visible = false end}
    return smenu
  end}
bar_menu:add_item{text="ACE Stream",sub_menu = function()
  local smenu = radical.context{}
    smenu:add_item{text="детские", button1 = function() awful.util.spawn("acestreamplayer http://super-pomoyka.us.to/trash/ttv-list/ttv.child.player.m3u") end}
    smenu:add_item{text="общие", button1 = function() awful.util.spawn("acestreamplayer http://super-pomoyka.us.to/trash/ttv-list/ttv.common.player.m3u") end}
    smenu:add_item{text="познавательные", button1 = function() awful.util.spawn("acestreamplayer http://super-pomoyka.us.to/trash/ttv-list/ttv.discover.player.m3u") end}
    smenu:add_item{text="развлекательные", button1 = function() awful.util.spawn("acestreamplayer http://super-pomoyka.us.to/trash/ttv-list/ttv.ent.player.m3u") end}
    smenu:add_item{text="фильмы", button1 = function() awful.util.spawn("acestreamplayer http://super-pomoyka.us.to/trash/ttv-list/ttv.film.player.m3u") end}
    smenu:add_item{text="музыкальные", button1 = function() awful.util.spawn("acestreamplayer http://super-pomoyka.us.to/trash/ttv-list/ttv.music.player.m3u") end}
    smenu:add_item{text="новости", button1 = function() awful.util.spawn("acestreamplayer http://super-pomoyka.us.to/trash/ttv-list/ttv.news.player.m3u") end}
    smenu:add_item{text="HD", button1 = function() awful.util.spawn("acestreamplayer http://super-pomoyka.us.to/trash/ttv-list/ttv.HD.player.m3u") end}
    smenu:add_item{text="Cancel", icon = beautiful.cancel, button1 = function() smenu.visible = false end}

    return smenu
  end}
bar_menu:add_item{text="Cancel", button1 = function() bar_menu.visible = false end}
bar_menu:add_item {text="Exit",sub_menu = function()
  local smenu = radical.context{width = 140,}
    smenu:add_item{text="Shutdown", icon = beautiful.shutdown, button1 = function() awful.util.spawn("systemctl poweroff") end}
    smenu:add_item{text="Reboot", icon = beautiful.restart, button1 = function() awful.util.spawn("systemctl reboot") end}
    smenu:add_item{text="Suspend", icon = beautiful.suspend, button1 = function() awful.util.spawn("systemctl suspend") end}
    smenu:add_item{text="Sleep", icon = beautiful.sleep, button1 = function() awful.util.spawn("systemctl hybrid-sleep") end}
    smenu:add_item{text="Cancel", icon = beautiful.cancel, button1 = function() smenu.visible = false end}
    return smenu
  end}

a = wibox.widget.imagebox()
a:set_image(beautiful.launcher_icon)
a:set_menu(bar_menu)

--== radical ==--
local tags = require("util.tags")
local wi = require("util.wi")

-- {{{ Menu
--[[
local myawesomemenu = {
    { "hotkeys", function() return false, hotkeys_popup.show_help end },
    { "manual", terminal .. " -e man awesome" },
    { "edit config", string.format("%s -e %s %s", terminal, editor, awesome.conffile) }
}
local myexit = {
    { " Exit", function() awful.util.spawn(script .. "exit")     end },
    { " Logout",   function() awesome.quit()                              end },
    { "test", function () exit_dialog.visible = true end},
    { "test1", function () exit_menu.visible = true end},
    { "Restart Awesome", awesome.restart }
}
local wine = {
    { "TC_Aion", function() awful.util.spawn(script .. "tc_aion")  end },
    { "TC",   function() awful.util.spawn(script .. "tc") end },
    { "Photoshop CS6 x32",  function() awful.util.spawn(script .. "p_shop") end },
    { "Aion",    function() awful.util.spawn(script .. "aion") end },
    { "Tera",    function() awful.util.spawn(script .. "tera") end },
    { "Rift",    function() awful.util.spawn(script .. "rift") end },
}

local mymainmenu = freedesktop.menu.build({
    before = {
        { "Wine", wine, beautiful.awesome_icon },
        { "Awesome", myawesomemenu, beautiful.launcher_icon },
    },
    after = {
        -- { "Open terminal", terminal },
        { "Exit", myexit, beautiful.launcher_icon },
    }
})
]]--
--[[
local mymainmenu = awful.menu({ items = { { "awesome", myawesomemenu},
                                          { "Applications", xdgmenu },
                                          { "Wine", wine },
                                          { "Exit", myexit }
                                        }
                              })
]]--
--mylauncher = awful.widget.launcher({ image = beautiful.launcher_icon, menu = mymainmenu })

-- }}}


local wiboks = require("util.wiboks")

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))

awful.mouse.snap.edge_enabled     = false
--awful.mouse.snap.client_enabled = false
-- перетащить окно на соседний тэг мышью
awful.mouse.drag_to_tag.enabled   = false

-- }}}
local alttab = require("radical.impl.alttab")
-- {{{ Key bindings
globalkeys = awful.util.table.join(

    awful.key({ modkey,           }, "Tab"   , function () alttab.altTab()          end ),
    awful.key({ modkey, "Shift"   }, "Tab"   , function () alttab.altTabBack()      end ),
    awful.key({ "Mod1",           }, "Tab"   , function () alttab.altTab({auto_release=true})          end ),
    awful.key({ "Mod1", "Shift"   }, "Tab"   , function () alttab.altTabBack({auto_release=true})      end ),

    awful.key({ modkey, "Control"   }, "a", lain.util.move_to_new_tag(),
          {description = "add a tag with the focused client", group = "tag"}),

    -- Take a screenshot
    -- https://github.com/copycat-killer/dots/blob/master/bin/screenshot
    awful.key({ altkey }, "p", function() os.execute("screenshot") end),

    -- Hotkeys
    awful.key({ modkey,           }, "s",      hotkeys_popup.show_help,
              {description="show help", group="awesome"}),
    -- Tag browsing
    awful.key({ modkey,           }, "Left",   awful.tag.viewprev,
              {description = "view previous", group = "tag"}),
    awful.key({ modkey,           }, "Right",  awful.tag.viewnext,
              {description = "view next", group = "tag"}),
    awful.key({ modkey,           }, "Escape", awful.tag.history.restore,
              {description = "go back", group = "tag"}),

    -- Non-empty tag browsing
    awful.key({ altkey }, "Left", function () lain.util.tag_view_nonempty(-1) end,
              {description = "view  previous nonempty", group = "tag"}),
    awful.key({ altkey }, "Right", function () lain.util.tag_view_nonempty(1) end,
              {description = "view  previous nonempty", group = "tag"}),

    -- Default client focus
    awful.key({ altkey,           }, "j",
        function ()
            awful.client.focus.byidx( 1)
        end,
        {description = "focus next by index", group = "client"}
    ),
    awful.key({ altkey,           }, "k",
        function ()
            awful.client.focus.byidx(-1)
        end,
        {description = "focus previous by index", group = "client"}
    ),

    -- By direction client focus
    awful.key({ modkey }, "j",
        function()
            awful.client.focus.bydirection("down")
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey }, "k",
        function()
            awful.client.focus.bydirection("up")
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey }, "h",
        function()
            awful.client.focus.bydirection("left")
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey }, "l",
        function()
            awful.client.focus.bydirection("right")
            if client.focus then client.focus:raise() end
        end),
    --awful.key({ modkey,           }, "w", function () mymainmenu:show() end,
    awful.key({ modkey,           }, "w", function () bar_menu.visible = true end,
              {description = "show main menu", group = "awesome"}),

    -- Layout manipulation
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end,
              {description = "swap with next client by index", group = "client"}),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end,
              {description = "swap with previous client by index", group = "client"}),
    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end,
              {description = "focus the next screen", group = "screen"}),
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end,
              {description = "focus the previous screen", group = "screen"}),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto,
              {description = "jump to urgent client", group = "client"}),
    awful.key({ modkey,           }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end,
        {description = "go back", group = "client"}),

    -- Show/Hide Wibox
    awful.key({ modkey }, "b", function ()
        for s in screen do
            s.mywibox.visible       = not s.mywibox.visible
            s.mybottomwibox.visible = not s.mybottomwibox.visible
        end
    end),

    -- On the fly useless gaps change
    awful.key({ altkey, "Control" }, "+", function () lain.util.useless_gaps_resize(1) end),
    awful.key({ altkey, "Control" }, "-", function () lain.util.useless_gaps_resize(-1) end),

    -- Dynamic tagging
    awful.key({ modkey, "Shift" }, "n", function () lain.util.add_tag() end),
    awful.key({ modkey, "Shift" }, "r", function () lain.util.rename_tag() end),
    awful.key({ modkey, "Shift" }, "Left", function () lain.util.move_tag(1) end),   -- move to next tag
    awful.key({ modkey, "Shift" }, "Right", function () lain.util.move_tag(-1) end), -- move to previous tag
    awful.key({ modkey, "Shift" }, "d", function () lain.util.delete_tag() end),

    -- Standard program
    awful.key({ modkey,           }, "Return", function () awful.spawn(terminal) end,
              {description = "open a terminal", group = "launcher"}),
    awful.key({ modkey, "Control" }, "r", awesome.restart,
              {description = "reload awesome", group = "awesome"}),
    awful.key({ modkey, "Shift"   }, "q", awesome.quit,
              {description = "quit awesome", group = "awesome"}),

    awful.key({ altkey, "Shift"   }, "l",     function () awful.tag.incmwfact( 0.05)          end,
              {description = "increase master width factor", group = "layout"}),
    awful.key({ altkey, "Shift"   }, "h",     function () awful.tag.incmwfact(-0.05)          end,
              {description = "decrease master width factor", group = "layout"}),
    awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1, nil, true) end,
              {description = "increase the number of master clients", group = "layout"}),
    awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1, nil, true) end,
              {description = "decrease the number of master clients", group = "layout"}),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1, nil, true)    end,
              {description = "increase the number of columns", group = "layout"}),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1, nil, true)    end,
              {description = "decrease the number of columns", group = "layout"}),
    awful.key({ modkey,           }, "space", function () awful.layout.inc( 1)                end,
              {description = "select next", group = "layout"}),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(-1)                end,
              {description = "select previous", group = "layout"}),

    awful.key({ modkey, "Control" }, "n",
              function ()
                  local c = awful.client.restore()
                  -- Focus restored client
                  if c then
                      client.focus = c
                      c:raise()
                  end
              end,
              {description = "restore minimized", group = "client"}),

    -- Dropdown application
    awful.key({ modkey, }, "z", function () awful.screen.focused().quake:toggle() end),

    -- Widgets popups
    awful.key({ altkey, }, "c", function () lain.widget.calendar.show(7) end),
    --awful.key({ altkey, }, "h", function () fsroot.show(7) end),
    awful.key({ altkey, }, "w", function () myweather.show(7) end),

    -- Audio
    awful.key({ modkey, "Shift"}, "p", function () pulse_audio.cycle_devices(); volumewidget.markup = pulseaudio.volume_info_c() end),
    awful.key({}, "XF86AudioMute", function() awful.spawn(string.format("pactl set-sink-mute %d toggle", volume.sink)); volume.update() end),
    awful.key({}, "XF86AudioLowerVolume", function() awful.spawn(string.format("pactl set-sink-volume %d -2%%", volume.sink)); volume.update() end),
    awful.key({}, "XF86AudioRaiseVolume", function() awful.spawn(string.format("pactl set-sink-volume %d +2%%", volume.sink)); volume.update() end),

    -- MPD control
    awful.key({ altkey, "Control" }, "Up",
        function ()
            awful.spawn.with_shell("mpc toggle || ncmpc toggle || pms toggle")
            mpdwidget.update()
        end),
    awful.key({ altkey, "Control" }, "Down",
        function ()
            awful.spawn.with_shell("mpc stop || ncmpc stop || pms stop")
            mpdwidget.update()
        end),
    awful.key({ altkey, "Control" }, "Left",
        function ()
            awful.spawn.with_shell("mpc prev || ncmpc prev || pms prev")
            mpdwidget.update()
        end),
    awful.key({ altkey, "Control" }, "Right",
        function ()
            awful.spawn.with_shell("mpc next || ncmpc next || pms next")
            mpdwidget.update()
        end),
    --]]

    -- Copy primary to clipboard
    --awful.key({ modkey }, "c", function () os.execute("xsel | xsel -b") end),

    -- User programs
    awful.key({ modkey }, "q", function () awful.spawn(browser) end),
    awful.key({ modkey }, "e", function () awful.spawn(gui_editor) end),
    awful.key({ modkey }, "g", function () awful.spawn(graphics) end),

    -- Default
    -- Prompt
    awful.key({ modkey }, "r", function () awful.screen.focused().mypromptbox:run() end,
              {description = "run prompt", group = "launcher"}),

    awful.key({ modkey }, "x",
              function ()
                  awful.prompt.run {
                    prompt       = "Run Lua code: ",
                    textbox      = awful.screen.focused().mypromptbox.widget,
                    exe_callback = awful.util.eval,
                    history_path = awful.util.get_cache_dir() .. "/history_eval"
                  }
              end,
              {description = "lua execute prompt", group = "awesome"}),
    -- Menubar
    awful.key({ modkey }, "p", function() menubar.show() end,
              {description = "show the menubar", group = "launcher"})
)

clientkeys = awful.util.table.join(
    awful.key({ altkey, "Shift"   }, "m",      lain.util.magnify_client                         ),
    awful.key({ modkey,           }, "f",
        function (c)
            c.fullscreen = not c.fullscreen
            c:raise()
        end,
        {description = "toggle fullscreen", group = "client"}),
    awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end,
              {description = "close", group = "client"}),
    awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ,
              {description = "toggle floating", group = "client"}),
    awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end,
              {description = "move to master", group = "client"}),
    awful.key({ modkey,           }, "o",      function (c) c:move_to_screen()               end,
              {description = "move to screen", group = "client"}),
    awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end,
              {description = "toggle keep on top", group = "client"}),
    awful.key({ modkey,           }, "n",
        function (c)
            -- The client currently has the input focus, so it cannot be
            -- minimized, since minimized clients can't have the focus.
            c.minimized = true
        end ,
        {description = "minimize", group = "client"}),
    awful.key({ modkey,           }, "m",
        function (c)
            c.maximized = not c.maximized
            c:raise()
        end ,
        {description = "maximize", group = "client"})
)

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.

for i = 1, 9 do
    globalkeys = awful.util.table.join(globalkeys,
        -- View tag only.
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = awful.screen.focused()
                        local tag = screen.tags[i]
                        if tag then
                           tag:view_only()
                        end
                  end,
                  {description = "view tag #"..i, group = "tag"}),
        -- Toggle tag display.
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = awful.screen.focused()
                      local tag = screen.tags[i]
                      if tag then
                         awful.tag.viewtoggle(tag)
                      end
                  end,
                  {description = "toggle tag #" .. i, group = "tag"}),
        -- Move client to tag.
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus then
                          local tag = client.focus.screen.tags[i]
                          if tag then
                              client.focus:move_to_tag(tag)
                          end
                     end
                  end,
                  {description = "move focused client to tag #"..i, group = "tag"}),
        -- Toggle tag on focused client.
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus then
                          local tag = client.focus.screen.tags[i]
                          if tag then
                              client.focus:toggle_tag(tag)
                          end
                      end
                  end,
                  {description = "toggle focused client on tag #" .. i, group = "tag"})
    )
end


clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ modkey }, 1, awful.mouse.client.move),
    awful.button({ modkey }, 3, awful.mouse.client.resize),
    -- Изменение размеров окна колесом мыши
    awful.button({ modkey, }, 4, function () lain.util.useless_gaps_resize( 1) end),
    awful.button({ modkey, }, 5, function () lain.util.useless_gaps_resize(-1) end)
    )

--[[ Кнопки мыши
1 - ЛКМ
2 - СКМ
3 - ПКМ
4 - колесо вперед
5 - колесо назад
6 - колесо влево
7 - колесо вправо
8 - кн назад
9 - кн вперед
]]--
-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
-- Rules to apply to new clients (through the "manage" signal).
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = awful.client.focus.filter,
                     raise = true,
                     keys = clientkeys,
                     buttons = clientbuttons,
                     screen = awful.screen.preferred,
                     placement = awful.placement.no_overlap+awful.placement.no_offscreen,
                     size_hints_honor = false
     }
    },

    -- Titlebars
    { rule_any = {
        instance = {
          "DTA",  -- Firefox addon DownThemAll.
          "copyq",  -- Includes session name in class.
        },
        class = {
          "Arandr",
          "Gpick",
          "Kruler",
          "MessageWin",  -- kalarm.
          "Sxiv",
          "Wpa_gui",
          "pinentry",
          "veromix",
          "xtightvncviewer"},

        name = {
          "Event Tester",  -- xev.
        },
        role = {
          "AlarmWindow",  -- Thunderbird's calendar.
          "pop-up",       -- e.g. Google Chrome's (detached) Developer Tools.
        }
      }, properties = { floating = true }},
    { rule_any = { type = { "dialog", "normal" } },
      properties = { titlebars_enabled = false } },
    { rule = { class = "Gimp", role = "gimp-image-window" },
          properties = { maximized_horizontal = true,
                         maximized_vertical = true } },

        --awful.spawn.with_shell('xprop -name "ncmpcpp 0.7.7" -f WM_CLASS 8s -set WM_CLASS "URxvt:ncmpcpp"')

}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.connect_signal("manage", function (c)
    -- Set the windows at the slave,
    -- i.e. put it at the end of others instead of setting it master.
    -- if not awesome.startup then awful.client.setslave(c) end

    if awesome.startup and
      not c.size_hints.user_position
      and not c.size_hints.program_position then
        -- Prevent clients from being unreachable after screen count changes.
        awful.placement.no_offscreen(c)
    end
end)

-- Add a titlebar if titlebars_enabled is set to true in the rules.
client.connect_signal("request::titlebars", function(c)
    -- buttons for the titlebar
    local buttons = awful.util.table.join(
        awful.button({ }, 1, function()
            client.focus = c
            c:raise()
            awful.mouse.client.move(c)
        end),
        awful.button({ }, 3, function()
            client.focus = c
            c:raise()
            awful.mouse.client.resize(c)
        end)
    )

    awful.titlebar(c, {size = 16}) : setup {
        { -- Left
            awful.titlebar.widget.iconwidget(c),
            buttons = buttons,
            layout  = wibox.layout.fixed.horizontal
        },
        { -- Middle
            { -- Title
                align  = "center",
                widget = awful.titlebar.widget.titlewidget(c)
            },
            buttons = buttons,
            layout  = wibox.layout.flex.horizontal
        },
        { -- Right
            awful.titlebar.widget.floatingbutton (c),
            awful.titlebar.widget.maximizedbutton(c),
            awful.titlebar.widget.stickybutton   (c),
            awful.titlebar.widget.ontopbutton    (c),
            awful.titlebar.widget.closebutton    (c),
            layout = wibox.layout.fixed.horizontal()
        },
        layout = wibox.layout.align.horizontal
    }
end)

-- Enable sloppy focus, so that focus follows mouse.

client.connect_signal("mouse::enter", function(c)
    if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
        and awful.client.focus.filter(c) then
        client.focus = c
    end
end)


-- No border for maximized clients
client.connect_signal("focus",
    function(c)
        if c.maximized_horizontal == true and c.maximized_vertical == true then
            c.border_width = 0
        -- no borders if only 1 client visible
        elseif #awful.client.visible(mouse.screen) > 1 then
            c.border_width = beautiful.border_width
            c.border_color = beautiful.border_focus
        end
    end)
client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}
 tt = awful.tag[1]
